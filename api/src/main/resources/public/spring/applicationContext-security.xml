<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.1.xsd
                        http://www.springframework.org/schema/security/oauth2
                        http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

    <!--<context:component-scan base-package="org.community.api.config"/>-->

    <!-- 获取 token
			http://localhost:8080/api/oauth/token?grant_type=password&client_id=restapp&client_secret=restapp&username=admin&password=123456
		 -->
    <!-- Definition of the Authentication Service -->
    <sec:http pattern="/oauth/token" create-session="stateless"
              authentication-manager-ref="authenticationManager">
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <sec:anonymous enabled="false"/>
        <sec:http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <sec:csrf disabled="true"/>
    </sec:http>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="allowOnlyPost" value="true"/>
    </bean>

    <!-- 1. OAuth2 related config -->
    <oauth2:authorization-server client-details-service-ref="clientDetailsService"
                                 token-services-ref="tokenServices"
                                 user-approval-handler-ref="userApprovalHandler"
                                 user-approval-page="oauth_approval"
                                 error-page="oauth_error">
        <oauth2:authorization-code authorization-code-services-ref="authorizationCodeServices"/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password/>
    </oauth2:authorization-server>

    <!-- 1.1 client detail service 第三方client端信息查询配置-->
    <bean id="clientDetailsService"
          class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>

    <!-- 1.2 Config token services token查询操作相关-->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="supportRefreshToken" value="true"/>
        <property name="accessTokenValiditySeconds" value="300000"/>
        <property name="tokenStore" ref="tokenStore"/>
        <property name="clientDetailsService" ref="clientDetailsService"/>
    </bean>
    <!--Config token services  将token信息存放数据库-->
    <bean id="tokenStore"
          class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>

    <bean id="approvalStore" class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
        <property name="tokenStore" ref="tokenStore"/>
    </bean>

    <!-- 1.3 oauthUserApprovalHandler 授权code获取-->
    <bean id="userApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler">
        <property name="approvalStore" ref="approvalStore"/>
        <property name="clientDetailsService" ref="clientDetailsService"/>
        <property name="requestFactory">
            <bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
                <constructor-arg index="0" ref="clientDetailsService"/>
            </bean>
        </property>
    </bean>

    <!-- 1.4 authorization code creator 用户授权处理-->
    <bean id="authorizationCodeServices"
          class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>

    <!-- 认证管理器，使用自定义的UserDetailsService，并对密码采用md5加密 (默认ClientDetailsUserDetailsService) -->
    <sec:authentication-manager id="authenticationManager">
        <sec:authentication-provider user-service-ref="userService">
            <sec:password-encoder hash="md5"/>
            <!--<sec:jdbc-user-service data-source-ref="dataSource"

                                   users-by-username-query="
                SELECT username, password, enabled
                FROM user WHERE username = ?"

                                   authorities-by-username-query="
                SELECT u.username, r.role_name
                FROM user u, user_role r, assigned_role a
                WHERE u.id = a.username
                AND r.id = a.role_id
                AND u.username = ?"
            />-->
        </sec:authentication-provider>
    </sec:authentication-manager>

    <!--认证失败，授权失败-->
    <bean id="oauth2AuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="conference/client"/>
        <property name="typeName" value="Basic"/>
    </bean>

    <bean id="oauth2AccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <!--scope投票机制-->
    <bean id="oauth2AccessDecisionManager"
          class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

    <!--web resource server filter-->
    <oauth2:resource-server id="webResourceServer" resource-id="web-resource" token-services-ref="tokenServices"/>
    <!--mobile resource server filter-->
    <oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices"/>

    <!--web http configuration-->
    <sec:http pattern="/web/**"
              request-matcher="mvc"
              create-session="never"
              entry-point-ref="oauth2AuthenticationEntryPoint"
              access-decision-manager-ref="oauth2AccessDecisionManager"
              use-expressions="false">
        <sec:anonymous enabled="false"/>

        <sec:intercept-url pattern="/web/**" access="ROLE_WEB,SCOPE_READ"/>

        <sec:custom-filter ref="webResourceServer" before="PRE_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <sec:csrf disabled="true"/>
    </sec:http>

    <!--mobile http configuration-->
    <sec:http pattern="/m/**"
              request-matcher="mvc"
              create-session="never"
              entry-point-ref="oauth2AuthenticationEntryPoint"
              access-decision-manager-ref="oauth2AccessDecisionManager"
              use-expressions="false">
        <sec:anonymous enabled="false"/>

        <sec:intercept-url pattern="/m/**" access="ROLE_MOBILE,SCOPE_READ"/>

        <sec:custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <sec:csrf disabled="true"/>
    </sec:http>

    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <sec:expression-handler ref="oauthExpressionHandler"/>
    </sec:global-method-security>

    <oauth2:expression-handler id="oauthExpressionHandler"/>
</beans>