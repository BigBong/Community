apply plugin: 'java'
//apply plugin: 'groovy'

configurations {
    mybatisGenerator
}

dependencies {
    testCompile libraries.junit

    // spring
    compile(
            libraries.spring_webmvc,
            libraries.spring_dao,
    )

    // groovy
    compile(
            libraries.groovy_all,
            libraries.spock_core,
    )

    // test
    compile(
            libraries.spring_test,
            libraries.mockito_all,
            libraries.hamcrest_library,
    )

    //  mysql
    compile libraries.mysql

    // mybatis
    compile(
            libraries.mybatis,
            libraries.mybatis_spring,
    )

    // logback
    compile(
            libraries.slf4j_api,
            libraries.logback_classic,
            libraries.log4j_over_slf4j,
    )

    //  jackson
    compile (
            libraries.jackson,
            libraries.jackson_databind,
    )

    // commons
    compile(
            libraries.commons_fileupload,
            libraries.commons_codec,
            libraries.commons_beanutils,
            libraries.commons_net,
            libraries.commons_collections,
            libraries.commons_configuration,
            libraries.commons_io,
    )

    mybatisGenerator libraries.mybatis_generator
    mybatisGenerator libraries.mysql
}

task mybatisGenerate << {
    def destDir = new File("src", 'main')
    println "destDir.path: ${destDir.path}"
    ant.properties['targetProject'] = destDir.path
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
        }
    }
}